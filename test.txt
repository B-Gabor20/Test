c#
public class osztaly1
{ 
public valtozo {get;private set}
public valtozo2 {get;private set}
public osztaly1(Bekertadat_valtnev)
{ 
	var valtozo33 = valtnev.split('').ToList();
	valtozo = valtozo33[0];
	valtozo2 = valtozo33[1];
}

List<osztaly1> osztalys = new List<osztaly1>();
string[] sorok = file.readalllines("fajlnev.kiterjesztes");
foreach string s in sorok.Skip(1))
{
	osztalys.add(new Osztaly1(s));
}

wpf: ugyanaz de     ObservableCollection<osztaly1> osztalys = new ObservableCollection<osztaly1>();

public override string ToString()
{
	return $"{}";
}

osztaly1 helyivalt = osztalys[index];
heylivalt.valtozo2

UNIT TEST:
//arrange var akarmi = new osztaly("amitbeker")
//act bool result = akarmi.metodus(akarmi.elem,akarmi.elem2)
//assert.istrue(result)
---------------------------------------------------
BACKEND
mysql.entityframeworkcore
microsoft.entityframeworkcore
microsoft.entityframeworkcore.tool
Scaffold-DbContext "server=localhost;database=proba;user=root;password=;sslmode=none;" mysql.entityframeworkcore -outputdir Models –f
using System.Text.Json.Serialization;
[JsonIgnore]
builder.Services.AddDbContext<ProbaContext>();
private readonly ProbaContext context;
public ValuesController(ProbaContext context)
{
    this.context = context;
}
public async Task<ActionResult> Get()
{
try var result = await context.targy
.include(v => v.tulaj)
.tolistasync();
return ok(result)
}

int targyakcount = await context.targy.CountAsync();

public async Task<ActionResult> AddTargy(string UserID, [FromBody] targyakDto targydto)
var newTargy = new Tárgy
{
    Id = targydto.Id,
    TargyNev = targydto.TargyNev
};
context.Tárgys.Add(newTargy);
await context.SaveChangesAsync();
return Ok(newTargy);

update
var existingTargy = await context.Tárgys.FirstOrDefaultAsync(v => v.Id == targydto.Id);
existingTargy.Id = targydto.Id;
existingTargy.TargyNev = targydto.TargyNev;
await context.SaveChangesAsync();

delete
var existingTargy = await context.Tárgys.FirstOrDefaultAsync(v => v.Id == targydto.Id);
context.Tárgys.Remove(existingTargy);
await context.SaveChangesAsync();
---------------------------------------------------
FRONTEND
<Router>
<nav classname=navbar>
<ul className="navbar-nav">
<li className="nav-item">
<NavLink to={`/`} className="nav-link">
<span className="nav-link">Főoldal</span>
</NavLink>
<Routes>
<Route path="/" element={<ItemList/>}/>
<Route path="/item/:itemId" element={<ItemSingleElement/>}/>
/ujitem		/moditem/:itemId	/deleteitem/:ItemId

LIST:
const [item,setitem] = useState([]);
    const [isFetchPending,setFetchPending] = useState(false);
    useEffect(() => {
        setFetchPending(true);
        const fetchPlayers = async () => {
            try {
                const response = await axios.get('https');
                setitem(response.data);
                setFetchPending(false);
            } catch (error) {
                console.error('Error fetching chess: ', error);
            }
        };
        fetchPlayers();
    }, []);

{item.map((item)=>(
<NavLink key={`/item/${item.id}`} to={`/item/${item.id}`}  >

SINGLEEL:
const { ItemId } = useParams();
    const [Item, setItem] = useState({});
    const [isFetchPending, setFetchPending] = useState(false);

    useEffect(() => {
        const fetchItemData = async () => {
            setFetchPending(true);
            try {
                const response = await axios.get(`https:item/${ItemId}`);
                setItem(response.data);
            } catch (error) {
                console.error("", error);
            } finally {
                setFetchPending(false);
            }
        };

        fetchItemData();
    }, [ItemId]);

CREAT:
const navigate = useNavigate();
return (
<div className='p5 content bg-whitesmoke text-center'>
<form
onSubmit={(event) => {
event.persist();
event.preventDefault();
const formData = new FormData(event.target);
const data = Object.fromEntries(formData);
fetch(``, {
                    method: "POST",
                    headers: {
                    "Content-Type": "application/json",
                    'Access-Control-Allow-Origin': '*'
                    },
                    body: JSON.stringify(data),
})
.then(() => {
	navigate(`/`);
})
.catch(console.log)
}}>
<div>everything>
</form>

DEL:
export function ItemDelete(props) {

    const params = useParams();
    const id = params.ItemId;
    const navigate = useNavigate();
    const [Item, setItem] = useState([]);
return (
    <form
            onSubmit={async (e) => {
                e.preventDefault();
                try {
                    await axios.delete(`https:/item/${id}`, {
                        headers: {
                            "Content-Type": "application/json",
                        },
                    });
                    navigate("/");
                } catch (error) {
                    console.log(error);
                }
            }}
            >

MOD:
const navigate = useNavigate();
    const param = useParams();
    const id = param.SakkId;
    const [Sakk, setSakk] = useState({});
    const [isFetchPending, setFetchPending] = useState(false);
    
    useEffect(() => {
        setFetchPending(true);
        (async() => {
            try {
                const res = await fetch(`https://chess.sulla.hu/chess/${id}`);
                const Sakk = await res.json();
                setSakk(Sakk);
            } catch(error) {
                console.log(error);
            } finally {
                setFetchPending(false);
            }
        })();
    },[id]);

<form onSubmit={async (event) => {
                event.preventDefault();
                const formData = new FormData(event.target);
                const data = Object.fromEntries(formData);
                try {
                    const response = await axios.put(`https:/item/${id}`, data, {
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    console.log(response.data);
                    navigate('/');
                } catch (error) {
                    console.error('Error:', error);
                }
            }}>